# -*- coding: utf-8 -*-
"""GrowIntern.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wwSCaVMTBue7lXA0lJl805FMcbWtwKXv

##Task1
"""

import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
import matplotlib.pyplot as plt

# Step 1: Collecting Data
stock_data = yf.download('AAPL', start='2021-01-01', end='2022-01-01')

# Step 2: Data Preprocessing
stock_data = stock_data.dropna()  # Handling missing values

# Step 3: Feature Engineering
# Let's create a simple moving average and percent change features
stock_data['MA_50'] = stock_data['Close'].rolling(window=50).mean()
stock_data['MA_200'] = stock_data['Close'].rolling(window=200).mean()
stock_data['PercentChange'] = stock_data['Close'].pct_change()

# Drop rows with NaN values after creating new features
stock_data = stock_data.dropna()

# Select features and target variable
features = ['Open', 'High', 'Low', 'Close', 'Volume', 'MA_50', 'MA_200', 'PercentChange']
target = 'Close'

X = stock_data[features]
y = stock_data[target]

# Step 4: Splitting Data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Model Training
model = LinearRegression()
model.fit(X_train, y_train)

# Step 6: Model Evaluation
y_pred = model.predict(X_test)
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

# Step 7: Future Price Prediction
# Predict the next day's stock price
next_day_features = X.tail(1)  # Assuming the last row contains the latest data
next_day_prediction = model.predict(next_day_features)
print('Next day\'s predicted stock price:', next_day_prediction[0])

# Step 8: Visualization
plt.figure(figsize=(10, 6))
plt.plot(y_test.values, label='Actual Price')
plt.plot(y_pred, label='Predicted Price')
plt.legend()
plt.show()

"""##Task3"""

# Import necessary libraries
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.datasets import mnist
import matplotlib.pyplot as plt

# Load the MNIST dataset (handwritten digit images)
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize the pixel values to the range [0, 1]
x_train, x_test = x_train / 255.0, x_test / 255.0

# Define a simple convolutional neural network (CNN) model
model = keras.Sequential([
    layers.Flatten(input_shape=(28, 28)),  # Flatten the 28x28 image into a 1D array
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.2),
    layers.Dense(10)  # Output layer with 10 classes (digits 0-9)
])

# Compile the model
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=5)

# Evaluate the model
test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print(f"Test accuracy: {test_acc}")

# Make predictions
predictions = model.predict(x_test)

# Display an example image and its prediction
index = 0  # Change this to see different examples
plt.figure()
plt.imshow(x_test[index], cmap=plt.cm.binary)
plt.title(f"Predicted: {tf.argmax(predictions[index])}, Actual: {y_test[index]}")
plt.show()